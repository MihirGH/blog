{
    "componentChunkName": "component---node-modules-lekoarts-gatsby-theme-minimal-blog-core-src-templates-post-query-tsx",
    "path": "/apollo-client-cheatsheet",
    "result": {"data":{"post":{"slug":"/apollo-client-cheatsheet","title":"Apollo Client Cheatsheet","date":"29.12.2021","tags":[{"name":"GraphQL","slug":"graph-ql"},{"name":"TypeScript","slug":"type-script"},{"name":"React","slug":"react"},{"name":"apollo-client","slug":"apollo-client"}],"description":null,"canonicalUrl":null,"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Apollo Client Cheatsheet\",\n  \"date\": \"2021-12-29T00:00:00.000Z\",\n  \"tags\": [\"GraphQL\", \"TypeScript\", \"React\", \"apollo-client\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Disclaimer\"), \": \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"This is a cheatsheet for apollo client, meant to help me quickly lookup the concepts with code snippets.\\nMost of the stuff that you see here will be taken directly from \", mdx(\"a\", {\n    parentName: \"em\",\n    \"href\": \"https://www.apollographql.com/docs\"\n  }, \"apollo client's documentation\"), \".\\nAlthough I will try my best but the content that you see here can be outdated/incorrect. In case if you see any discrepancy, please reach out to me on \", mdx(\"a\", {\n    parentName: \"em\",\n    \"href\": \"https://twitter.com/__mihirs15__\"\n  }, \"twitter\"), \".\")), mdx(\"h2\", null, \"Why Apollo Client?\"), mdx(\"h3\", null, \"Declarative data fetching:\"), mdx(\"p\", null, \"All of the logic for retrieving your data (making a network request), tracking loading and error states, and keeping your UI up-to-date based on the network request's status is encapsulated by the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"useQuery\"), \" hook.\"), mdx(\"p\", null, \"An example of the API:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"function Feed() {\\n  const { loading, error, data } = useQuery(GET_DOGS);\\n  // Handle error state\\n  if (error) return <Error />;\\n  // Handle loading state\\n  if (loading) return <Fetching />;\\n\\n  // Network request is succesfully resolved\\n  // let's use the data to render our UI\\n  return <DogList dogs={data.dogs} />;\\n}\\n\")), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"useQuery\"), \" leverages React's Hooks API to bind the query to our component and render it based on the results of our query.\\nApollo Client takes care of the request cycle from start to finish, including tracking loading and error states for you and triggering re-renders of the component based on the state.\"), mdx(\"h3\", null, \"Zero Config Caching:\"), mdx(\"p\", null, \"One of the key features that sets Apollo Client apart from other data management solutions is its \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"normalized\"), \" cache.\\n\", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Since you can have multiple paths leading to the same data, normalization is essential for keeping your data consistent across multiple components.\")), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Normalization\"), \": Apollo Client splits out each object in a GraphQL result with a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"__typename\"), \" and an \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"id\"), \" property into its own entry in the Apollo cache.\\nThis guarantees that returning a value from a mutation with an \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"id\"), \" will automatically update any queries that fetch the object with the same id.\"), mdx(\"hr\", null), mdx(\"h2\", null, \"Queries\"), mdx(\"h3\", null, \"Executing a query\"), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"useQuery\"), \" React hook is the primary API for executing queries in an Apollo application.\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Arguments:\"), \" To run a query within a React component, call \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"useQuery\"), \" and pass it a GraphQL query string.\\n\\uD83D\\uDCA1 Remember to wrap query strings in the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"gql\"), \" function to parse them into query documents.\\nWe can also pass configuration options (for example: \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"variables\"), \") as the second argument in the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"useQuery\"), \" hook.\\nThe \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"variables\"), \" option is an object that contains all of the variables we want to pass to our GraphQL query.\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Returns:\"), \" When your component renders, useQuery returns an object from Apollo Client that contains loading, error, and data properties you can use to render your UI.\"), mdx(\"h3\", null, \"Caching query results\"), mdx(\"p\", null, \"Whenever Apollo Client fetches query results from your server, it \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"automatically\"), \" caches those results locally. This makes subsequent executions of the same query extremely fast.\"), mdx(\"p\", null, \"Example: Fetch the dogs list, render the list in dropdown. Select a dog and render \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"DogPhoto\"), \" component based on its breed.\\nIf we select bulldog from the dropdown, we will first see a network request and once it resolves we can see its photo appear.\\nNow if we switch to another breed, and then switch back to bulldog, the bulldog's photo loads instantly the second time around. This is the Apollo cache at work!\"), mdx(\"h3\", null, \"Updating cached query results\"), mdx(\"p\", null, \"Sometimes, you want to make sure that your query's cached data is up to date with your server's data.\\nApollo Client supports two strategies for this: \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"polling\"), \" and \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"refetching\"), \".\"), mdx(\"h4\", null, \"Polling\"), mdx(\"p\", null, \"Polling provides near-real-time synchronization with your server by executing your query periodically at a specified interval.\\nTo enable polling for a query, we can pass a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"pollInterval\"), \" configuration option (second argument) to the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"useQuery\"), \" hook with an interval in milliseconds.\\nFor example: By setting pollInterval to 500, we fetch the current breed's image from the server every 0.5 seconds. Note that if you set pollInterval to 0, the query does not poll.\"), mdx(\"h4\", null, \"Refetching\"), mdx(\"p\", null, \"Refetching enables you to \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"refresh query results in response to a particular user action\"), \", as opposed to using a fixed interval.\\nYou can optionally provide a new variables object to the refetch function. If you don't, the query uses the \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"same variables\"), \" that it used in its previous execution.\"), mdx(\"h4\", null, \"Inspecting loading states\"), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"useQuery\"), \" hook's result object provides fine-grained information about the status of the query via the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"networkStatus\"), \" property.\\nPassing \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"notifyOnNetworkStatusChange\"), \" option as true triggers a re-render in our query component while a refetch is in flight.\"), mdx(\"h4\", null, \"Inspecting error states\"), mdx(\"p\", null, \"You can customize your query error handling by providing the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"errorPolicy\"), \" configuration option to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"useQuery\"), \" hook.\\nDefault value is \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"none\"), \", which tells Apollo Client to treat all GraphQL errors as runtime errors.\\nIn this case, Apollo Client discards any query response data returned by the server and sets the error property in the useQuery result object.\"), mdx(\"p\", null, \"If you set \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"errorPolicy\"), \" to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"all\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"useQuery\"), \" \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"does not discard\"), \" query response data, allowing you to render partial results.\"), mdx(\"h4\", null, \"Manual execution with useLazyQuery\"), mdx(\"p\", null, \"When React renders a component that calls useQuery, Apollo Client automatically executes the corresponding query.\\nBut what if you want to execute a query in response to a different event, such as a user clicking a button?\"), mdx(\"p\", null, \"The useLazyQuery hook is perfect for executing queries in response to events besides component rendering.\\nUnlike with useQuery, when you call useLazyQuery, it \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"does not immediately execute\"), \" its associated query.\\nInstead, it returns a query function in its result tuple that you call whenever you're ready to execute the query.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\",\n    \"metastring\": \"{6,15}\",\n    \"{6,15}\": true\n  }, \"import React from \\\"react\\\";\\n\\nimport { useLazyQuery } from \\\"@apollo/client\\\";\\n\\nfunction DelayedQuery() {\\n  const [getDog, { loading, error, data }] = useLazyQuery(GET_DOG_PHOTO);\\n\\n  if (loading) return <p>Loading ...</p>;\\n  if (error) return `Error! ${error}`;\\n\\n  return (\\n    <div>\\n      {data?.dog && <img src={data.dog.displayImage} />}\\n\\n      <button onClick={() => getDog({ variables: { breed: \\\"bulldog\\\" } })}>\\n        Click me!\\n      </button>\\n    </div>\\n  );\\n}\\n\")), mdx(\"p\", null, \"The first item in useLazyQuery's return tuple is the \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"query function\"), \", and the second item is the same result object returned by useQuery.\"), mdx(\"p\", null, \"As shown above, you can pass configuration options to the query function just like you pass them to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"useLazyQuery\"), \" itself.\\nIf you pass a particular option to both, the value you pass to the query function takes precedence.\"), mdx(\"p\", null, \"\\uD83D\\uDCA1 This is a handy way to pass default options to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"useLazyQuery\"), \" and then customize those options in the query function\"), mdx(\"h4\", null, \"Setting a fetch policy\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"cache-first\"), \" - The default fetch policy:\"), mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Apollo Client first executes the query against the cache.\\nIf \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"all\"), \" requested data is present in the cache, that data is returned.\\nOtherwise, Apollo Client executes the query against your GraphQL server and returns that data after caching it.\"), mdx(\"p\", {\n    parentName: \"li\"\n  }, \"\\uD83D\\uDCA1 Prioritizes minimizing the number of network requests sent by your application.\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"cache-only\"), \":\"), mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Apollo Client executes the query \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"only against the cache\"), \". It never queries your server in this case.\"), mdx(\"p\", {\n    parentName: \"li\"\n  }, \"A cache-only query \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"throws an error\"), \" if the cache does not contain data for all requested fields.\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"cache-and-network\"), \":\"), mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Apollo Client executes the full query against \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"both\"), \" the \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"cache\"), \" and \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"your GraphQL server\"), \".\\nThe query automatically updates (triggers a re-render) if the result of the server-side query \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"modifies\"), \" cached fields.\"), mdx(\"p\", {\n    parentName: \"li\"\n  }, \"\\uD83D\\uDCA1 Provides a fast response while also helping to keep cached data consistent with server data.\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"network-only\"), \":\"), mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Apollo Client executes the full query against your GraphQL server, without first checking the cache.\\nThe query's result \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"is stored\"), \" in the cache.\"), mdx(\"p\", {\n    parentName: \"li\"\n  }, \"\\uD83D\\uDCA1 Prioritizes consistency with server data, but \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"can't provide\"), \" a near-instantaneous response when cached data is available. Doesn't utilize the cache at all.\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"no-cache\"), \":\"), mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Similar to network-only, except the query's result \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"is not\"), \" stored in the cache.\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"standby\"), \":\"), mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Uses the same logic as cache-first, except this query does not automatically update when underlying field values change. You can still manually update this query with refetch and updateQueries.\"))), mdx(\"h5\", null, \"Difference between different fetchPolicies:\"), mdx(\"p\", null, \"Let's consider the following scenario where we are using the same \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"useNotesCategoryQuery\"), \" at two different places.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"<App>\\n  // Internally uses useNotesCategoryQuery\\n  <NotesCategorySwitcher />\\n  <NotesList />\\n  {showCreationModal ? (\\n    <NoteCreationFormModal>\\n      <NoteContent />\\n      // Internally uses useNotesCategoryQuery\\n      <NotesCategorySelector />\\n    </NoteCreationFormModal>\\n  ) : null}\\n</App>\\n\")), mdx(\"p\", null, \"When the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"NotesCategorySelector\"), \" is mounted, the cache already has the list of categories via \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"NotesCategorySwitcher\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"cache-first\"), \": no network call is made and the useQuery returns \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"loading: false\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"data: Categories[]\"), \".\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"cache-and-network\"), \": a network call is made and the useQuery returns \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"loading: true\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"data: Categories[]\"), \".\\nOnce the network request is resolved, the component gets re-rendered with updated data if there are any changes.\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"network-only\"), \": a network call is made and the useQuery returns \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"loading: true\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"data: undefined\"), \" even though the cache has list of categories.\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"no-cache\"), \": a network call is made and the useQuery returns \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"loading: true\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"data: undefined\"), \", the cache doesn't have list of categories either.\"))), mdx(\"p\", null, \"cache and network - checks cache\"));\n}\n;\nMDXContent.isMDXComponent = true;","excerpt":"Disclaimer :  This is a cheatsheet for apollo client, meant to help me quickly lookup the concepts with code snippets.\nMost of the stuff…","timeToRead":5,"banner":null}},"pageContext":{"slug":"/apollo-client-cheatsheet","formatString":"DD.MM.YYYY"}},
    "staticQueryHashes": ["2744905544","3090400250","318001574"]}