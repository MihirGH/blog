{
    "componentChunkName": "component---node-modules-lekoarts-gatsby-theme-minimal-blog-core-src-templates-post-query-tsx",
    "path": "/blind-75",
    "result": {"data":{"post":{"slug":"/blind-75","title":"Blind 75","date":"06.04.2022","tags":[{"name":"DataStructures","slug":"data-structures"},{"name":"Algorithms","slug":"algorithms"},{"name":"Blind75","slug":"blind-75"},{"name":"LeetCode","slug":"leet-code"}],"description":"A blog meant to serve as breadcrumbs for future me consisting of thoughts, gotchas and the final solutions when going through the LeetCode problems in the Blind75 list.","canonicalUrl":null,"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Blind 75\",\n  \"date\": \"2022-04-06T00:00:00.000Z\",\n  \"updatedOn\": \"2022-04-10T00:00:00.000Z\",\n  \"description\": \"A blog meant to serve as breadcrumbs for future me consisting of thoughts, gotchas and the final solutions when going through the LeetCode problems in the Blind75 list.\",\n  \"tags\": [\"DataStructures\", \"Algorithms\", \"Blind75\", \"LeetCode\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h3\", null, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"https://leetcode.com/problems/two-sum/\"\n  }, \"Two Sum\")), mdx(\"h4\", null, \"Problem Statement:\"), mdx(\"p\", null, \"Given an array of integers \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"nums\"), \" and an integer \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"target\"), \", return indices of the two numbers such that they add up to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"target\"), \".\"), mdx(\"h4\", null, \"Initial Thoughts:\"), mdx(\"h5\", null, \"Brute force search in \", mdx(\"inlineCode\", {\n    parentName: \"h5\"\n  }, \"O(n^2)\"), \":\"), mdx(\"p\", null, \"Loop through each element \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"x\"), \" and find if there is another value that equals to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"target\"), \" - \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"x\")), mdx(\"h5\", null, \"Using Map:\"), mdx(\"p\", null, \"For a more efficient way to check if the complement exists in the array - we can maintain a Map.\\nFor each element \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"nums[i]\"), \", we will store \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"i\"), \" for \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"nums[i]\"), \" as key.\\nThis will reduce the time down to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"O(n)\"), \" but it will also have \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"O(n)\"), \" space complexity.\"), mdx(\"p\", null, \"We can do better than going through the array twice.\\nWhile we are constructing the Map we can check if its complement has already been inserted or not.\"), mdx(\"h6\", null, \"Solution:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-ts\"\n  }, \"function twoSum(nums: number[], target: number): number[] {\\n  const map = new Map<number, number>(nums.map((num, index) => [num, index]));\\n  let answer: number[] = [];\\n\\n  nums.forEach((num, index) => {\\n    const complementNumber = target - num;\\n    const complementIndex = map.get(complementNumber);\\n    if (typeof complementIndex === \\\"undefined\\\") return;\\n    if (complementIndex === index) return;\\n\\n    answer = [index, complementIndex];\\n  });\\n\\n  return answer;\\n}\\n\")), mdx(\"h3\", null, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"https://leetcode.com/problems/two-sum/\"\n  }, \"Longest substring without repeating characters\")), mdx(\"h4\", null, \"Problem Statement:\"), mdx(\"p\", null, \"Given a string \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"s\"), \", find the length of the longest substring without repeating characters.\"), mdx(\"h4\", null, \"Initial Thoughts:\"), mdx(\"h5\", null, \"Brute force:\"), mdx(\"p\", null, \"Fix an initial starting index say \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"i\"), \".\\nNow search for all the substrings starting at index \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"i\"), \" and ending at index \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"j\"), \" where \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"i <= j < s.length\"), \"\\nNow in this substring find if there are any repeating characters - if not check with the best answer so far and if it beats the best answer then consider this as the new best answer.\\nThe time complexity depends on how we are finding if there are any repeating characters in a string.\"), mdx(\"p\", null, \"So the time complexity will be \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"O(n ^ 2 * (cost of finding repeating characters))\")), mdx(\"h5\", null, \"Two pointer approach:\"), mdx(\"p\", null, \"Keep a left pointer which starts from index 0. Initialise the right pointer also at index 0.\"), mdx(\"p\", null, \"If the substring from left to right does not have repeating characters then we can increment the right pointer while the constraint is met.\\nIf the substring has repeating characters then we have two choices:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Either we keep incrementing the right pointer - but that doesn't make any sense because the string has repeated characters.\\nAny more addition in the string will only make it contain repeated characters\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Or we can increment the left pointer and hope to drop the repeating characters\")), mdx(\"p\", null, \"Since in this approach, all the elements will be traversed at most twice - once by each left and right pointer.\\nSo the time complexity will be \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"O(n * (cost of finding repeating characters))\")), mdx(\"p\", null, \"I wouldn't have been able to solve this using two-pointer approach had I not watched the video from the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://www.youtube.com/watch?v=eS6PZLjoaq8\"\n  }, \"Back to Back SWE\"), \".\"), mdx(\"p\", null, \"But the main problem still remains to be solved: How do I find if a string has repeating characters or not?\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-ts\"\n  }, \"function hasRepeatingCharacters(s: string): boolean {\\n  const seenCharacters = new Set([...s]);\\n  return seenCharacters.size < s.length;\\n}\\n\\nfunction lengthOfLongestSubstring(s: string): number {\\n  let leftPointer = 0;\\n  let rightPointer = 1;\\n  let answer = 0;\\n\\n  while (rightPointer <= s.length) {\\n    const substringToCheck = s.substring(leftPointer, rightPointer);\\n    if (hasRepeatingCharacters(substringToCheck)) {\\n      leftPointer += 1;\\n      continue;\\n    }\\n    answer = Math.max(answer, substringToCheck.length);\\n    rightPointer += 1;\\n  }\\n\\n  return answer;\\n}\\n\")), mdx(\"hr\", null), mdx(\"h3\", null, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"https://leetcode.com/problems/two-sum/\"\n  }, \"Longest palindromic substring\")), mdx(\"p\", null, \"I was lazy to write all my thoughts on this day since the problem was a bit difficult and I couldn't think about anything other than a bruteforce solution\"), mdx(\"hr\", null), mdx(\"h3\", null, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"https://leetcode.com/problems/container-with-most-water/\"\n  }, \"Container With Most Water\")), mdx(\"h4\", null, \"Problem Statement:\"), mdx(\"p\", null, \"You are given an integer array height of length \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"n\"), \". There are n vertical lines drawn such that the two endpoints of the ith line are \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"(i, 0)\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"(i, height[i])\"), \".\"), mdx(\"p\", null, \"Find two lines that together with the x-axis form a container, such that the container contains the most water.\"), mdx(\"p\", null, \"Return the maximum amount of water a container can store.\"), mdx(\"h4\", null, \"Initial Thoughts:\"), mdx(\"h5\", null, \"Brute force:\"), mdx(\"p\", null, \"Pick all the possible pairs \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"i\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"j\"), \".\\nThe answer is not dependent on how tall or short beams lies between them but only on the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"heights[i]\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"heights[j]\"), \".\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-ts\"\n  }, \"let answer = 0;\\nfor (let i = 0; i < n; i++) {\\n  for (let j = i + 1; j < n; j++) {\\n    const area = (j - i) * Math.min(heights[i], heights[j]);\\n    answer = Math.max(area, answer);\\n  }\\n}\\nreturn answer;\\n\")), mdx(\"h5\", null, \"Optimized Approach:\"), mdx(\"p\", null, \"I could come up with this constraint but it wasn't that useful:\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"We want to maximise the product of distance between two lines and the difference of heights between two lines\")), mdx(\"p\", null, \"Had to look at hints but still wasn't very clear how I could optimise the brute force solution, Hint:\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"Start with the maximum width container and go to a shorter width container if there is a vertical line longer than the current containers shorter line.\\nThis way we are compromising on the width but we are looking forward to a longer length container.\")), mdx(\"p\", null, \"After looking at the hint I thought:\"), mdx(\"p\", null, \"For any given range \", \"[L, R]\", \", we have two choices: \", \"[L + 1, R]\", \" and \", \"[L, R - 1]\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"We should move to L + 1 if heights\", \"[L]\", \" < maxHeights(L + 1, R)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"We should move to R - 1 if heights\", \"[R]\", \" < maxHeights(L, R - 1)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"If heights\", \"[L]\", \" === heights\", \"[R]\", \" - we can move to whoever has maximum among maxHeights(L + 1, R), maxHeights(L, R - 1)\")), mdx(\"p\", null, \"And then I got stuck on how to construct the said \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"maxHeights\"), \" function\"), mdx(\"h4\", null, \"Solution:\"), mdx(\"p\", null, \"Start the left pointer at the beginning and the right pointer at the end\"), mdx(\"p\", null, \"If at any point \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"heights[l] <= heights[r]\"), \" then we move the left pointer by 1 in the right direction. Otherwise we move the right pointer by 1 in the left direction.\"), mdx(\"h5\", null, \"Proof of correctness:\"), mdx(\"p\", null, \"Suppose our left pointer is at index \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"i\"), \" and our right pointer is at index \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"j\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"S(i, j)\"), \" is the current answer.\"), mdx(\"p\", null, \"Say \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"heights[i] <= heights[j]\"), \" and we move to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"S(i + 1, j)\"), \"\\nIn this case, we are omitting \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"S(i, j - 1)\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"S(i, j - 2)\"), \" and so on till \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"S(i, i + 1)\"), \".\"), mdx(\"p\", null, \"But for all such right pointers we have omitted, the minimum height would be \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"heights[i]\"), \" or even lesser than \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"heights[i]\"), \".\\nAlso, the distance would be at least one less than what was between \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"i\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"j\"), \" and hence we are making our area lesser if we had decreased our right pointer in this case.\\nHence, there is no way that the omitted states will have better answer compared to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"S(i, j)\"), \".\"), mdx(\"p\", null, \"Same can be said about the other case: \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"heights[j] < heights[i]\"), \" and we move to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"S(i, j - 1)\"), \"\\nIn this case we are omitting \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"S(i + 1, j)\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"S(i + 2, j)\"), \" and so on till \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"S(j - 1, j)\"), \".\"), mdx(\"p\", null, \"But for all such left pointers we have omitted, the minimum height would be \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"heights[j]\"), \" or even lesser than \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"heights[j]\"), \".\\nAlso, the distance would be at least one less than what was between \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"i\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"j\"), \" and hence we are only making our area lesser if we had incremented our left pointer in this case.\\nHence, there is no way that the omitted states will have better answer compared to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"S(i, j)\"), \".\"), mdx(\"p\", null, \"The code for this approach can be found \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://leetcode.com/submissions/detail/676191292/\"\n  }, \"here\"), \".\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"You have two heights \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"h[l]\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"h[r]\"), \", and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"h[l]\"), \" < \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"h[r]\"), \", then we know we have two choices, we want to move one of them. If we move the larger one, we cannot increase the height for the simple reason that we are always limited by the shortest, and we would be decreasing \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"j - i\"), \", the width as well.\")), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"To clarify: let's say we kept the shortest forever, what would happen? Well, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"j - i\"), \" would decrease, and either we come across a taller block, which doesn't matter because our shorter one we kept only mattered, or we find a shorter one, in which case that one matters.\\nEither way we end up with a smaller area, so we must move the shorter one because moving the larger one cannot give an increase in area.\")), mdx(\"hr\", null), mdx(\"h3\", null, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"https://leetcode.com/problems/trapping-rain-water/\"\n  }, \"Trapping Rain Water\")), mdx(\"h4\", null, \"Problem Statement:\"), mdx(\"p\", null, \"Given n non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it can trap after raining.\"), mdx(\"h4\", null, \"Initial Thoughts:\"), mdx(\"h5\", null, \"Pointer based approach - Failing for a particular edge case :'(\"), mdx(\"p\", null, \"We need to first find the index of the \\\"bar\\\" which has non zero height, say \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"x\"), \".\\nSimilarly, we need to find the index of the last bar which has non zero height, say \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"y\"), \".\\nWe need to do this because we can't trap the water before these non-zero heighted bars.\"), mdx(\"p\", null, \"We will initialise our left pointer L at \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"x\"), \" and our right pointer R at \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"x + 1\"), \".\\nNow, we will keep increasing our right pointer till we find the first bar which has height greater than height\", \"[L]\", \".\\nThe way we have constructed our pointers, right now R is the first index in the \", \"[L, R]\", \" range for which height\", \"[L]\", \" < height\", \"[R]\", \"\\nSo, we can go ahead and assume a cube from \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"L + 1\"), \" to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"R - 1\"), \" with length of ((R - 1) - (L + 1) + 1) = (R - L - 1) and height of height\", \"[L]\", \" and width 1.\\nThis is the raw volume assuming that in the range \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"L + 1\"), \" to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"R - 1\"), \" we have zero heighted bars in between.\\nWe need to compensate for those bars and we will do that by looping from \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"L + 1\"), \" to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"R\"), \" excluding R and subtracting height of all the bars in between.\\nThis will give us the water that can be trapped in the range \", \"[L, R]\", \".\"), mdx(\"p\", null, \"As soon as we have added the amount in the answer, we will set our left pointer to R and right pointer to R + 1 and keep searching for this till our right pointer is less than or equal to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"y\"), \".\"), mdx(\"p\", null, \"But there's an edge case in this approach.\\nThere can be a case where our R has reached \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"y\"), \" but the left pointer \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"L\"), \" is still stuck at the maximum value somewhere.\\nWe need to count the volume in between if water can be trapped in between.\\nThe water can only be trapped in this last range if there exists a minima in \", \"[L, R]\", \" otherwise if it is decreasing then no water can be trapped in between.\"), mdx(\"p\", null, \"Sadly, this is the part where I got stuck and couldn't think of any way to implement this.\"), mdx(\"h4\", null, \"Final Solution:\"), mdx(\"p\", null, \"I am yet to go through the solution so hopefully I will update it later hopefully!\"), mdx(\"hr\", null), mdx(\"h3\", null, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"https://leetcode.com/problems/3sum/\"\n  }, \"3Sum\")), mdx(\"h4\", null, \"Problem Statement:\"), mdx(\"p\", null, \"Given an integer array nums, return all the triplets \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"[nums[i], nums[j], nums[k]]\"), \" such that \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"i != j\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"i != k\"), \", and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"j != k\"), \", and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"nums[i] + nums[j] + nums[k] == 0\"), \".\"), mdx(\"h4\", null, \"Initial Thoughts:\"), mdx(\"h5\", null, \"Pointer based approach:\"), mdx(\"p\", null, \"Since we only need to find the triplets and the order doesn't matter, we can sort our array.\\nAfter sorting the array, we can loop from index \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"i = 0\"), \" till \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"i + 2 < nums.length\"), \" and our task boils down to finding two numbers in the remaining sorted array whose sum add upto \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"-nums[i]\"), \".\"), mdx(\"p\", null, \"This sub-problem can be solved using two pointers where we initialise our left pointer L as \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"i + 1\"), \" and the right pointer R as \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"nums.length - 1\"), \".\\nIf \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"sortedNums[L] + sortedNums[R] > -sortedNums[i]\"), \" then that means we have to lower our right pointer because increasing L pointer in this case will only make the sum go high.\\nIf \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"sortedNums[L] + sortedNums[R] < -sortedNums[i]\"), \" then that means we have to increase our left pointer because decreasing R pointer in this case will only make the sum go down.\\nAnd finally if \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"sortedNums[L] + sortedNums[R] === sortedNums[i]\"), \" then we have found the triplet where \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"i != L != R\"), \" and their sum is 0.\"), mdx(\"p\", null, \"But we still need to get rid of the duplicate triplets. For example, if the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"nums\"), \" array is \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"[1, -1, -1, 0]\"), \" then our above algorithm will report two triplets \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"[[-1, 0, 1], [-1, 0, 1]]\"), \".\\nThis is happening because there are two distinct indices for \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"-1\"), \" which can be paired up with 0 and 1.\"), mdx(\"p\", null, \"So, to remove the duplicate triplets, I came up with a very naive solution:\\nI kept track of all pairs seen for a particular \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"sortedNums[i]\"), \" if a triplet was found.\\nAnd if there existed pairs corresponding to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"sortedNums[i]\"), \" I checked if any of the pair's first number was \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"sortedNums[leftPointer]\"), \"\\nIf yes then \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"[sortedNums[i], sortedNums[leftPointer], sortedNums[rightPointer]]\"), \" is already \\\"seen\\\" and has already been added to the answer and we can ignore this.\"), mdx(\"p\", null, \"This solution is not memory efficient and may add extra overhead too when we are comparing it will all the \\\"seen\\\" triplets but it works.\"), mdx(\"p\", null, \"The code for this naive approach can be found \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://leetcode.com/submissions/detail/676754690/\"\n  }, \"here\"), \".\"), mdx(\"h4\", null, \"Final Solution:\"), mdx(\"p\", null, \"An important thing to note here is that the triplet can only be repeated if we have multiple entries for either \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"nums[i]\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"nums[leftPointer]\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"nums[rightPointer]\"), \" or all of the three. So, we can do a little bit better by:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Moving \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"i\"), \" to the \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"last occurrence\"), \" for that particular number.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Once found the answer:\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Keep increasing L so that we skip all multiple entries for \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"sortedNums[L]\"), \".\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Keep decreasing R so that we skip all multiple entries for \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"sortedNums[R]\"), \".\\nand resume the search in now updated \", \"[L, R]\", \" range.\")))), mdx(\"p\", null, \"The code for this appproach can be found \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://leetcode.com/submissions/detail/676762008/\"\n  }, \"here\"), \".\"), mdx(\"hr\", null), mdx(\"h3\", null, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"https://leetcode.com/problems/top-k-frequent-elements/\"\n  }, \"Top k frequent elements\")), mdx(\"p\", null, \"Given an integer array \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"nums\"), \" and an integer \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"k\"), \", return \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"the k\"), \" most frequent elements.\\nYou may return the answer in any order.\"), mdx(\"h4\", null, \"Initial Thoughts:\"), mdx(\"h5\", null, \"Using Map to count frequency and then using buckets to store numbers with a particular frequency:\"), mdx(\"p\", null, \"Loop through all the numbers in the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"nums\"), \" array and maintain a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"numberToFrequency\"), \" map.\\nMake an array of size \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"1 + nums.length\"), \" and call it \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"frequencyToNumbers\"), \", the entries will be an array of integers itself.\\nThis will essentially serve as a reverse lookup table where the index will be a particular frequency and we will get how many numbers were preesnt in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"nums\"), \" array with that particular frequency.\\nOnce the said array is constructed, we will initialise an \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"answer\"), \" array and we will loop through the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"frequencyToNumbers\"), \" array it the reverse order - starting from the highest frequency till the frequency 1 and keep pushing all the elements for a particular frequency in the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"answer\"), \" array.\\nWe will keep pushing till the size of the answer array is not equal to k.\"), mdx(\"p\", null, \"Time complexity: \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"O(N)\"), \" to construct \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"numberToFrequency\"), \" map plus \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"O(N)\"), \" to construct the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"frequencyToNumbers\"), \" array and then \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"O(N)\"), \" in the worst case to loop through the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"frequencyToNumbers\"), \" array and filling up the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"answer\"), \" array.\"), mdx(\"p\", null, \"Space complexity: \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"O(N)\"), \" for \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"numberToFrequency\"), \" map plus \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"O(N)\"), \" to for the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"frequencyToNumbers\"), \" array.\"), mdx(\"p\", null, \"The code for this approach can be found \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://leetcode.com/submissions/detail/676792991/\"\n  }, \"here\"), \".\"), mdx(\"h4\", null, \"Final Solution:\"), mdx(\"h5\", null, \"Using Heap:\"), mdx(\"p\", null, \"We can also solve this using Heap datastructure. The detailed explanation of the heap datastructure can be found \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"./heap\"\n  }, \"here\"), \".\\nThere you can also find the solution of this problem using heaps.\"), mdx(\"hr\", null), mdx(\"h3\", null, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"https://leetcode.com/problems/remove-nth-node-from-end-of-list\"\n  }, \"Remove Nth Node From End of List\")), mdx(\"p\", null, \"The detailed solution for this problem can be found in this \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"./linked-list\"\n  }, \"post\")), mdx(\"hr\", null), mdx(\"h3\", null, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"https://leetcode.com/problems/valid-parentheses/\"\n  }, \"Valid Parentheses\")), mdx(\"h4\", null, \"Problem Statement:\"), mdx(\"p\", null, \"Given a string s containing just the characters '(', ')', '{', '}', '\", \"[' and ']\", \"', determine if the input string is valid.\"), mdx(\"p\", null, \"An input string is valid if:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Open brackets must be closed by the same type of brackets.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Open brackets must be closed in the correct order.\")), mdx(\"h4\", null, \"Solution:\"), mdx(\"p\", null, \"This is the classic example of how Stack can be used. Whenever we encounter a closing bracket, we need to check it with the last opening bracket.\\nTo remeber the last opening bracket, we can use the Stack data structure and whenever we encounter an opening bracket, we just push it on the stack to retrieve it later.\"), mdx(\"p\", null, \"In the end, we just need to check if there are no opening brackets left in the stack - if there are, then that means that we have excess of opening brackets and string is not valid.\"), mdx(\"p\", null, \"The code for the above approach can be found \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://leetcode.com/submissions/detail/678087340/\"\n  }, \"here\"), \".\"), mdx(\"hr\", null), mdx(\"h3\", null, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"https://leetcode.com/problems/merge-two-sorted-lists/\"\n  }, \"Merge Two Sorted Lists\")), mdx(\"h4\", null, \"Problem Statement:\"), mdx(\"p\", null, \"You are given the heads of two sorted linked lists \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"list1\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"list2\"), \".\"), mdx(\"p\", null, \"Merge the two lists in a one sorted list. The list should be made by splicing together the nodes of the first two lists.\"), mdx(\"p\", null, \"Return the head of the merged linked list.\"), mdx(\"h4\", null, \"Solution:\"), mdx(\"p\", null, \"First of all, we start by creating a dummy node for the merged list - \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"mergedListHead\"), \".\\nWe initialise a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"firstPointer\"), \" by setting it to point to the head of the first list and similarly initialise \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"secondPointer\"), \" by setting it to point to the head of the second list.\\nWe also keep a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"lastNode\"), \" to point to the last node we have inserted in the merged list and initialise it by setting it to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"mergedListHead\"), \".\"), mdx(\"p\", null, \"Then, we start looping till we have traversed both the lists and added all nodes in the merged list.\\nDuring each iteration, we check:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"If we have firstPointer and secondPointer we make \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"lastNode.next\"), \" point to the smaller of these two.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Then we set the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"lastNode\"), \" to point to the smaller node that we have just inserted.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"And at last, to keep things moving, we increment the smaller node to point to its next node.\")), mdx(\"p\", null, \"If either of the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"firstPointer\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"secondPointer\"), \" has reached \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"null\"), \", we make sure to add all the nodes from the remaining list so that we cover all the elements.\"), mdx(\"p\", null, \"The code for the above approach can be found \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://leetcode.com/submissions/detail/678097421/\"\n  }, \"here\"), \".\"), mdx(\"hr\", null), mdx(\"h3\", null, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"https://leetcode.com/problems/merge-k-sorted-lists/\"\n  }, \"Merge \", mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"k\"), \" Sorted Lists\")), mdx(\"h4\", null, \"Problem Statement:\"), mdx(\"p\", null, \"You are given an array of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"k\"), \" linked-lists \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"lists\"), \", each linked-list is sorted in ascending order.\"), mdx(\"p\", null, mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Merge all the linked-lists into one sorted linked-list and return it.\")), mdx(\"h4\", null, \"Solution:\"), mdx(\"h5\", null, \"Brute Force solution:\"), mdx(\"p\", null, \"First of all, we start by creating a dummy node for the merged list - \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"mergedListHead\"), \".\\nWe also keep a pointer \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"lastInsertedNode\"), \" and initialise it with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"mergedListHead\"), \".\"), mdx(\"p\", null, \"Then, during each iteration, we start by finding the minimum out of all \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"k\"), \" lists' head say \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"minimumNode\"), \" and the list's index in the original \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"lists\"), \" array say \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"min\"), \".\\nWe insert the said minimum node in the list by setting \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"lastInsertedNode.next\"), \" to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"minimumNode\"), \".\\nWe update the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"lastInsertedNode\"), \" as \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"minimumNode\"), \" and we go to the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"lists[min]\"), \" and set it to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"lists[min].next\"), \" and essentially popping it out.\"), mdx(\"p\", null, \"Time complexity: \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"O(kN)\"), \" where N is the total number of nodes in all the lists combined. The factor of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"k\"), \" comes in because for inserting each node we have to go and compare all \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"k\"), \" heads of all lists.\"), mdx(\"p\", null, \"The code for the above approach can be found \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://leetcode.com/submissions/detail/678113739/\"\n  }, \"here\"), \".\"), mdx(\"h5\", null, \"Optimized solution using MinHeap:\"), mdx(\"p\", null, \"The detailed explanation of the MinHeap datastructure and the solution using MinHeap can be found \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"./heap\"\n  }, \"here\"), \".\"), mdx(\"hr\", null), mdx(\"h3\", null, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"https://leetcode.com/problems/search-in-rotated-sorted-array/\"\n  }, \"Search in Rotated Sorted Array\")), mdx(\"h4\", null, \"Problem Statement:\"), mdx(\"p\", null, \"There is an integer array \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"nums\"), \" sorted in ascending order (with distinct values).\"), mdx(\"p\", null, \"Prior to being passed to your function, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"nums\"), \" is \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"possibly rotated\"), \" at an unknown pivot index \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"k\"), \" \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"(1 <= k < nums.length)\"), \" such that the resulting array is\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"[nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]]\"), \" (0-indexed).\\nFor example, \", \"[0,1,2,4,5,6,7]\", \" might be rotated at pivot index 3 and become \", \"[4,5,6,7,0,1,2]\", \".\"), mdx(\"p\", null, \"Given the array \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"nums\"), \" after the possible rotation and an integer \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"target\"), \", return the index of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"target\"), \" if it is in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"nums\"), \", or \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"-1\"), \" if it is not in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"nums\"), \".\"), mdx(\"p\", null, \"You must write an algorithm with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"O(logN)\"), \" runtime complexity.\"), mdx(\"h4\", null, \"Solution:\"), mdx(\"h5\", null, \"Binary Search:\"), mdx(\"p\", null, \"After the rotation, the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"nums\"), \" array can be thought of as partitioned into three regions: \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"[...x, pivot, ...y]\"), \".\\nThe region \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"x\"), \" is sorted in ascending order and also the combined region \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"[pivot, ...y]\"), \" is sorted in ascending order.\\nBecause \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"nums\"), \" had distinct values, all the numbers in the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"x\"), \" region are strictly greater than \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"pivot\"), \" and all the numbers in the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"y\"), \" region.\"), mdx(\"p\", null, \"Hence, if we want to find target in nums array, we can either find it in the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"x\"), \" region via binary search or in the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"[pivot, ...y]\"), \" region via binary search.\\nAnd this will require us to find the index of the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"pivot\"), \" first.\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Finding index of \", mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"pivot\")), \":\"), mdx(\"p\", null, \"We are interested in finding index of the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"pivot\"), \" element say \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"i\"), \". Notice that \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"pivot < y[0]\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"pivot < x[x.length - 1]\"), \".\\nSo, if we were to apply binary search to find the index of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"pivot\"), \", our base case would be finding \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"mid\"), \" such that \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"arr[mid] < arr[mid + 1]\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"arr[mid] < arr[mid - 1]\"), \".\\nAnd at each step, we can also prune the half of the search space, how?\"), mdx(\"p\", null, \"If \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"arr[mid] > arr[high]\"), \" then we know that this can only happen if \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"arr[mid]\"), \" is in the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"x\"), \" region and the pivot can only be found in the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"[mid + 1, high]\"), \" region.\\nAnd if \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"arr[mid] < arr[high]\"), \" then we know that this can happen if \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"arr[mid]\"), \" is in the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"[pivot, ...y]\"), \" region.\\nIt is possible that \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"arr[mid]\"), \" is the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"pivot\"), \" so we store it as a potential answer and keep searching in the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"[low, mid - 1]\"), \" region\\nThis is so for the case when \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"arr[mid]\"), \" is in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"y\"), \" region and not equal to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"pivot\"), \".\"), mdx(\"p\", null, \"So, since we are able to correctly prune the search space by half, we can use binary search in finding the index of pivot.\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Finding index of \", mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"target\")), \":\\nOnce we have found the index of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"pivot\"), \", we are just left with the task of finding \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"target\"), \" in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"nums.slice(0, pivotIndex)\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"nums.slice(pivotIndex)\"), \".\\nIf \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"target\"), \" is not found in the either of the region, we return -1.\"), mdx(\"p\", null, \"Time complexity: \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"O(logN)\"), \" to find the index of pivot. \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"O(logN)\"), \" to find the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"target\"), \" in the two sorted sub-arrays of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"nums\")), mdx(\"p\", null, \"The code for the above approach can be found \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://leetcode.com/submissions/detail/697560316/\"\n  }, \"here\"), \".\"), mdx(\"hr\", null), mdx(\"h3\", null, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"https://leetcode.com/problems/combination-sum/\"\n  }, \"Combination Sum\")), mdx(\"h4\", null, \"Problem Statement:\"), mdx(\"p\", null, \"Given an array of \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"distinct\"), \" integers \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"candidates\"), \" and a target integer \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"target\"), \", return a list of \", \"*\", \"all \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"unique combinations\", \"*\"), \" of candidates where the chosen numbers sum to target. You may return the combinations in any order.\"), mdx(\"p\", null, \"The \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"same\"), \" number may be chosen from candidates an \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"unlimited number of times\"), \".\\nTwo combinations are unique if the frequency of at least one of the chosen numbers is different.\"), mdx(\"p\", null, \"It is \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"guaranteed\"), \" that the number of unique combinations that sum up to \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"target\"), \" is less than 150 combinations for the given input.\"), mdx(\"h4\", null, \"Solution:\"), mdx(\"h5\", null, \"Recursive Approach:\"), mdx(\"p\", null, \"First of all, we sort all the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"candidates\"), \" in ascending order.\"), mdx(\"p\", null, \"Let's say we are considering whether to include \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"candidates[0]\"), \" in building the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"target\"), \" or not.\\nIf we choose to include \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"candidates[0]\"), \" to include in the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"target\"), \" then we need to see if \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"target - candidates[0]\"), \" can be build from \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"candidates[0:]\"), \" since repeatations are allowed.\\nIf we choose to exclude \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"candidates[0]\"), \" then our job is to find if we can build \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"target\"), \" from \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"candidates[1:]\"), \" onwards.\"), mdx(\"p\", null, \"To generalise,\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"canBuild(candidates[i:], target) = canBuild(candidates[0:], target - candidates[i])\\n  || canBuild(candidates[(i + 1):], target)\\n\")), mdx(\"p\", null, \"The base condition will be:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"If \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"target < 0\"), \" then we will return \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"false\"), \".\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"If \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"target === 0\"), \" then we return \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"true\"), \".\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"If \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"i >= candidates.length\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"target > 0\"), \" then we return \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"false\"), \".\")), mdx(\"p\", null, \"The above recurrence relation with the base cases just tells us if it is possible to generate \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"target\"), \" from all \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"candidates\"), \" or not.\\nWe actually need to find all the combinations too. How do we find the combinations?\"), mdx(\"p\", null, \"For this, we maintain a global \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"answer\"), \" array where we will store all the combinations and we keep an array of current combinations at each step.\\nIf \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"target === 0\"), \" then we push the current combination array in the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"answer\"), \" array.\\nBut this will lead to pushing duplicate combinations having same frequency if the recurrence relation logic is kept the same.\\nThis is because let's say the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"candidates\"), \" array is \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"[2, 3]\"), \" and target is \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"7\"), \".\\nThen there are two paths that will lead us to 7:\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Pick \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"candidates[0]\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"candidates[0]\"), \" and then \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"candidates[1]\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Pick \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"candidates[1]\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"candidates[0]\"), \" and then \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"candidates[0]\"), \" again.\")), mdx(\"p\", null, \"How do we avoid these duplicate combinations?\"), mdx(\"p\", null, \"Suppose, there was a combination containing \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"candidates[i]\"), \" that led to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"target\"), \".\\nEither this combination would have been found by our exhaustive search when we were at index \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"j < i\"), \",\\nor \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"candidates[i]\"), \" would have been the first one in the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"combinations\"), \" array.\"), mdx(\"p\", null, \"Hence, we can avoid searching from 0 again when we pick an element \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"candidates[i]\"), \" and keep searching for answer from \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"i\"), \" itself.\"), mdx(\"p\", null, \"Time complexity: At each step, we have two choices.\"), mdx(\"p\", null, \"The code for the above approach can be found \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://leetcode.com/submissions/detail/697627968/\"\n  }, \"here\"), \".\"), mdx(\"hr\", null), mdx(\"h3\", null, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"https://leetcode.com/problems/rotate-image/\"\n  }, \"Rotate Image\")), mdx(\"h4\", null, \"Problem Statement:\"), mdx(\"p\", null, \"You are given an \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"n x n\"), \" 2D matrix representing an image, rotate the image by 90 degrees (clockwise).\"), mdx(\"p\", null, \"You have to rotate the image in-place, which means you have to modify the input 2D matrix directly. \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"DO NOT\"), \" allocate another 2D matrix and do the rotation.\"), mdx(\"h4\", null, \"Initial thoughts:\"), mdx(\"p\", null, mdx(\"img\", {\n    parentName: \"p\",\n    \"src\": \"https://cdn.hashnode.com/res/hashnode/image/upload/v1650094051142/_YcQoBjlA.png\",\n    \"alt\": \"Image explaining the matrix before and after rotation\"\n  })), mdx(\"p\", null, \"After looking at the above image and tracking each element, we can see a pattern here that:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"an element in the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"j\"), \"th column goes to \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"j\"), \"th row and\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"an element in the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"i\"), \"th row goes to \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"n - 1 - i\"), \"th column.\")), mdx(\"p\", null, \"In general, an element \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"(i, j)\"), \" goes to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"(j, n - 1 - i)\"), \".\"), mdx(\"p\", null, \"I was able to derive the above pattern on my own and using the above pattern, we can derive the rotated matrix of size \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"n x n\"), \"\\nbut that would have consumed extra space and wouldn't satisfy the constraint that we need to do this in-place - without using extra memory.\"), mdx(\"h4\", null, \"Solution:\"), mdx(\"h5\", null, \"Seeing rotation as composition of transformations:\"), mdx(\"p\", null, \"We can see that the 90 degree clockwise rotation is nothing but a composition/chaining of 2 transformations:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"An element at \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"(i, j)\"), \" goes to \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"(j, i)\"), \" - also commonly known as transpose\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Element at \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"(i, j)\"), \" goes to \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"(i, n - 1 - j)\"), \" - vertical reflection\")), mdx(\"p\", null, \"Our original rotation is nothing but an element going to its transpose position and from there going to its reflection: \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"(i, j) -> (j, i) -> (j, n - 1 - i)\"), \".\"), mdx(\"p\", null, \"The code for the above approach can be found \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://leetcode.com/submissions/detail/681305822/\"\n  }, \"here\"), \".\"), mdx(\"h5\", null, mdx(\"a\", {\n    parentName: \"h5\",\n    \"href\": \"https://leetcode.com/problems/rotate-image/solution/\"\n  }, \"Rotate Groups of Four Cells\"), \":\"), mdx(\"p\", null, \"We can see that element at \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"(i, j)\"), \" goes to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"(j, n - 1 - i)\"), \" which goes to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"(n - 1 - i, n - 1 -j)\"), \" which goes to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"(n - 1 - j, i)\"), \" which finally goes to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"(i, j)\"), \". So what we can do is:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-ts\"\n  }, \"const temp = matrix[n - 1 - j][i];\\n// Update fourth element by third\\nmatrix[n - 1 - j][i] = matrix[n - 1 - i][n - 1 - j];\\n// Update third element by second\\nmatrix[n - 1 - i][n - 1 - j] = matrix[j][n - 1 - i];\\n// Update second element by first\\nmatrix[j][n - 1 - i] = matrix[i][j];\\n// Update first element by fourth\\nmatrix[i][j] = temp;\\n\")), mdx(\"p\", null, \"The main challenge in this approach is how to execute the above swaps in a loop so that all elements are touched only once.\"), mdx(\"p\", null, \"For this let's say we are looking at \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"n x n\"), \" matrix right now. Let's say we are going to handle the elements of just the 0th row for now.\"), mdx(\"p\", null, \"Let's say we loop from the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"0\"), \"th column and go on till the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"(n - 2)\"), \"th column (0-based indexing). If we rotate any element \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"matrix[0][j]\"), \" then for that we will end up rotating the corresponding element on the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"(n - 1)\"), \"th column, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"(n - 1)\"), \"th row and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"0\"), \"th column according to the above logic.\\nAnd after we are done rotating all such element \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"matrix[0][j]\"), \" where \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"0 <= j < n - 1\"), \" we will have taken care of the outermost layer of the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"n x n\"), \" matrix, and we will be left with rotating remaining \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"(n - 2) x (n - 2)\"), \" matrix.\"), mdx(\"p\", null, \"More generally, if we are solving for a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"k x k\"), \" sub-matrix, at any element \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"left + i\"), \" in the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"top\"), \" row, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"matrix[top][left + i]\"), \" will go to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"matrix[top + i][right]\"), \" that will go to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"matrix[bottom][right - i]\"), \" and that will go to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"matrix[bottom - i][left]\"), \" which will eventually go back to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"matrix[top][left + i]\"), \" for all \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"0 <= i < (right - left)\"), \".\"), mdx(\"p\", null, \"Here \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"top\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"bottom\"), \" are the first and last rows and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"left\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"right\"), \" are the first and last columns respectively of the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"k x k\"), \" sub-matrix of an \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"n x n\"), \" sub-matrix.\\nFormally, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"top = k - 1\"), \", left = \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"k - 1\"), \", right = \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"n - k\"), \" bottom = \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"n - k\"), \" in a zero based indexing.\\nFor example, if we looking at the inner \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"2 x 2\"), \" matrix then \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"top = left = (2 - 1) = 1\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"right = bottom = (4 - 2) = 2\"), \".\\nOnce we are done with handling \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"k x k\"), \" sub-matrix we move on to handle \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"(k - 2) x (k - 2)\"), \" sub-matrix of this \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"k x k\"), \" sub-matrix.\"), mdx(\"p\", null, \"The code for the above approach can be found \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://leetcode.com/submissions/detail/681391222/\"\n  }, \"here\"), \".\"), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://www.youtube.com/watch?v=fMSJSS7eO1w\"\n  }, \"This\"), \" is a great video from NeetCode channel illustrating the above approach visually.\"), mdx(\"hr\", null), mdx(\"h3\", null, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"https://leetcode.com/problems/group-anagrams/\"\n  }, \"Group Anagrams\")), mdx(\"h4\", null, \"Problem Statement:\"), mdx(\"p\", null, \"Given an array of strings \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"strs\"), \", group the anagrams together. You can return the answer in any order.\"), mdx(\"p\", null, \"An Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.\"), mdx(\"h4\", null, \"Initial thoughts:\"), mdx(\"h5\", null, \"Using a HashMap:\"), mdx(\"p\", null, \"Since all anagrams have same characters and same frequency for each character, their sorted strings are equal.\\nThis sorted string can be used as a representative string and this can be used as a key in the HashMap.\"), mdx(\"p\", null, \"The code for the above approach can be found \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://leetcode.com/submissions/detail/681640055/\"\n  }, \"here\"), \".\"), mdx(\"h4\", null, \"Solution:\"), mdx(\"h5\", null, \"Using frequency as a key in the HashMap:\"), mdx(\"p\", null, \"We can transform each string \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"s\"), \" into a tuple of 26 non-negative integers representing the number of all characters.\\nWe can then join the entries of this tuple via a delimiter such as # and use the resulting string as the key in the HashMap.\"), mdx(\"hr\", null), mdx(\"h3\", null, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"https://leetcode.com/problems/maximum-subarray/\"\n  }, \"Maximum Subarray\")), mdx(\"p\", null, \"The detailed solution for this problem can be found in this \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"./one-dimensional-dp\"\n  }, \"post\")), mdx(\"hr\", null), mdx(\"h3\", null, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"https://leetcode.com/problems/spiral-matrix/\"\n  }, \"Spiral Matrix\")), mdx(\"h4\", null, \"Problem Statement:\"), mdx(\"p\", null, \"Given an \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"m x n matrix\"), \", return all elements of the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"matrix\"), \" in spiral order.\"), mdx(\"h4\", null, \"Initial thoughts:\"), mdx(\"p\", null, \"This problem can be solved using the same approach as Rotate Image problem. First of all, we start with the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"top\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"left\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"right\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"bottom\"), \" pointers. We initialise \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"top\"), \" pointer as \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"0\"), \", the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"bottom\"), \" pointer as \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"m - 1\"), \", the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"left\"), \" pointer as \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"0\"), \" and the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"right\"), \" pointer as \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"n - 1\"), \". Then for given set of these four pointers, we need to traverse the elements in this order:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"All elements of the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"top\"), \" row from \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"left\"), \" to \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"right\"), \" column and increment the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"top\"), \" pointer by 1.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"All elements of the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"right\"), \" column from the updated \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"top\"), \" (\", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"prevTop + 1\"), \") to the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"bottom\"), \" row and decrease the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"right\"), \" pointer by 1.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"All elements of the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"bottom\"), \" row from the updated \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"right\"), \" (\", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"prevRight - 1\"), \") to \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"left\"), \" column only if \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"top <= bottom\"), \", and decrease the bottom pointer by 1.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Finally, all the elements of the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"left\"), \" column from the updated \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"bottom\"), \" (\", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"prevBottom - 1\"), \") to updated \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"top\"), \" (\", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"prevTop - 1\"), \") row only if \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"left <= right\"), \".\")), mdx(\"p\", null, \"These if conditions in the 3rd and 4th step are to make sure we don't overcount.\"), mdx(\"p\", null, \"This way, we'd have taken care of all the elements in the outer layer and we simply need to focus on the inner remaining matrix.\"), mdx(\"p\", null, \"The code for the above approach can be found \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://leetcode.com/submissions/detail/700852637/\"\n  }, \"here\"), \".\"));\n}\n;\nMDXContent.isMDXComponent = true;","excerpt":"Two Sum Problem Statement: Given an array of integers  nums  and an integer  target , return indices of the two numbers such that they add…","timeToRead":16,"banner":null}},"pageContext":{"slug":"/blind-75","formatString":"DD.MM.YYYY"}},
    "staticQueryHashes": ["2744905544","3090400250","318001574"]}