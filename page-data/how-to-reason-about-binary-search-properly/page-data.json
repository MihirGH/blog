{
    "componentChunkName": "component---node-modules-lekoarts-gatsby-theme-minimal-blog-core-src-templates-post-query-tsx",
    "path": "/how-to-reason-about-binary-search-properly",
    "result": {"data":{"post":{"slug":"/how-to-reason-about-binary-search-properly","title":"How to reason about Binary Search properly","date":"15.04.2021","tags":[{"name":"DataStructures","slug":"data-structures"},{"name":"Algorithms","slug":"algorithms"},{"name":"Blind75","slug":"blind-75"},{"name":"LeetCode","slug":"leet-code"},{"name":"BinarySearch","slug":"binary-search"}],"description":"All the possible variations of Binary Search algorithm and mathematical proof of correctness for each of the variation.","canonicalUrl":null,"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"How to reason about Binary Search properly\",\n  \"description\": \"All the possible variations of Binary Search algorithm and mathematical proof of correctness for each of the variation.\",\n  \"date\": \"2021-04-15T00:00:00.000Z\",\n  \"tags\": [\"DataStructures\", \"Algorithms\", \"Blind75\", \"LeetCode\", \"BinarySearch\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", null, \"1) Find the index of an element in a sorted array without duplicates:\"), mdx(\"h3\", null, \"Code:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-ts\"\n  }, \"function findIndex(arr: number[], target: number): number {\\n  let low = 0;\\n  let high = arr.length - 1;\\n\\n  while (low <= high) {\\n    const mid = low + Math.floor((high - low) / 2);\\n    if (arr[mid] === target) return mid;\\n    if (arr[mid] > target) {\\n      high = mid - 1;\\n    } else {\\n      low = mid + 1;\\n    }\\n  }\\n\\n  return -1;\\n}\\n\")), mdx(\"h3\", null, \"Invariants:\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Invariant\"), \": If \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"target\"), \" is in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"arr\"), \" then there exists at least one valid range \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"[low, high]\"), \" where \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"low <= indexOf(target) <= high\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"arr[low] <= target <= arr[high]\"), \".\"), mdx(\"p\", null, \"If \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"target\"), \" is not in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"arr\"), \" then there doesn't exist any such valid range \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"[low, high]\"), \".\"), mdx(\"h4\", null, \"Proving Invariant:\"), mdx(\"p\", null, \"Before entering the loop, if \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"target\"), \" exists in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"arr\"), \" then the range \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"[0, arr.length - 1]\"), \" will definitely contain it.\"), mdx(\"h5\", null, mdx(\"inlineCode\", {\n    parentName: \"h5\"\n  }, \"arr[mid] == target\"), \" branch:\"), mdx(\"p\", null, \"Inside the loop, if \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"arr[mid] == target\"), \" then we have found the index of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"target\"), \" in our \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"arr\"), \" and we don't care about the invariant any more since we don't need to search any more and we don't need to shorten the current range under consideration.\"), mdx(\"h5\", null, mdx(\"inlineCode\", {\n    parentName: \"h5\"\n  }, \"arr[mid] > target\"), \" branch:\"), mdx(\"p\", null, \"Since \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"arr[mid] > target\"), \" then for all index \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"i > mid\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"arr[i] > arr[mid] > target\"), \" (assuming all distinct elements in the array) and hence it is futile to search in the range \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"[mid, high]\"), \".\"), mdx(\"p\", null, \"So when we set \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"high\"), \" to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"mid - 1\"), \", our invariant still holds true. If \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"target\"), \" is in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"arr\"), \" then it will be found in the updated range \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"[low, mid - 1]\"), \".\"), mdx(\"h5\", null, mdx(\"inlineCode\", {\n    parentName: \"h5\"\n  }, \"arr[mid] < target\"), \" branch:\"), mdx(\"p\", null, \"Since \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"arr[mid] < target\"), \" then \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"i < mid\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"arr[i] < arr[mid] < target\"), \" (assuming all distinct elements in the array) and hence it is futile to search in the range \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"[low, mid]\"), \".\"), mdx(\"p\", null, \"So when we set \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"low\"), \" to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"mid + 1\"), \" our invariant still holds true. If \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"target\"), \" is in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"arr\"), \" then it will be found in the updated range \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"[mid + 1, high]\"), \".\"), mdx(\"h3\", null, \"Bound function:\"), mdx(\"p\", null, \"A monotonically decreasing function of the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"low\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"high\"), \" variables of our range ensures that we eventually terminate the loop and we don't get stuck in the infinite loop.\"), mdx(\"p\", null, \"A good candidate for the bound function is the size of the search space/range = \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"high - low + 1\")), mdx(\"p\", null, \"At each step of the iteration, we are shortening our search space by at least one. But how do we mathematically prove this?\"), mdx(\"p\", null, \"An important thing to note here is that \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"mid <= high\"), \". This is true because \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"low <= high\"), \" according to our loop condition.\"), mdx(\"p\", null, \"And hence, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"low + high <= high + high\"), \". Therefore \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Math.floor((low + high) / 2) <= high\"), \" which proves \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"mid <= high\"), \".\"), mdx(\"p\", null, \"When we set the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"low\"), \" to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"mid + 1\"), \", new search space size is \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"high - (mid + 1) + 1\"), \" = \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"high - mid\"), \" and since \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"low <= mid\"), \" and when we invert the inequality we get \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"-low >= -mid\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"high - low >= high - mid\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"high - low + 1 > high - mid\"), \". So our new search space size is strictly smaller for this branch.\"), mdx(\"p\", null, \"When we set \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"high\"), \" to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"mid - 1\"), \", new search space size is \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"(mid - 1) - low + 1\"), \" = \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"mid - low\"), \". Since \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"mid <= high\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"mid - low <= high - low\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"mid - low < high - low + 1\"), \". So our new search space size is smaller for this branch as well.\"), mdx(\"h3\", null, \"Proof of correctness:\"), mdx(\"p\", null, \"This is where defining the correct invariant and maintaining the invariant really shines.\"), mdx(\"p\", null, \"If \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"target\"), \" existed in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"arr\"), \" then by our invariant and bound function we would have eventually reached a range such that \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"low == high == mid\"), \" for which \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"arr[low] <= target <= arr[high]\"), \" and since \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"low == high == mid\"), \" we would have returned that mid as answer.\"), mdx(\"p\", null, \"Eventually, we will break out of the loop when \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"low > high\"), \" and that will happen only after we have searched for the smallest possible range which is \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"low == high == mid\"), \" and for that valid search space, if \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"arr[mid]\"), \" was equal to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"target\"), \" then we would've returned from the function then and there. The fact that we didn't return from the function means that we have exhausted all valid search spaces.\"), mdx(\"p\", null, \"So when we break out of loop, we can return \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"-1\"), \" stating element didn't exist in array.\"), mdx(\"hr\", null), mdx(\"h2\", null, \"2) Find the index of an element's first occurrence in a sorted array (with duplicates):\"), mdx(\"h3\", null, \"Code:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-ts\"\n  }, \"function findFirstOccurrence(arr: number[], target: number): number {\\n  let low = 0;\\n  let high = arr.length - 1;\\n  let answer = -1;\\n\\n  while (low <= high) {\\n    const mid = low + Math.floor((high - low) / 2);\\n    if (arr[mid] >= target) {\\n      answer = mid;\\n      high = mid - 1;\\n    } else {\\n      low = mid + 1;\\n    }\\n  }\\n\\n  return answer;\\n}\\n\")), mdx(\"h3\", null, \"Invariants:\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Invariant\"), \": If \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"target\"), \" is in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"arr\"), \" then there exists at least one valid range \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"[low, high]\"), \" where \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"low <= firstIndex(target) <= high\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"arr[low] <= target <= arr[high]\"), \".\"), mdx(\"p\", null, \"If \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"target\"), \" is not in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"arr\"), \" then there doesn't exist any such valid range \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"[low, high]\"), \".\"), mdx(\"h4\", null, \"Proving Invariant:\"), mdx(\"p\", null, \"Before entering the loop, if \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"target\"), \" exists in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"arr\"), \" then the range \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"[0, arr.length - 1]\"), \" will definitely contain its first occurrence.\"), mdx(\"h5\", null, mdx(\"inlineCode\", {\n    parentName: \"h5\"\n  }, \"arr[mid] >= target\"), \" branch:\"), mdx(\"p\", null, \"Inside the loop, if \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"arr[mid] >= target\"), \" then we have found one such occurrence of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"target\"), \" in our \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"arr\"), \". It can be a valid first occurrence but there's a chance that there might be a first occurrence before this. Mathematically, we know for sure that for all \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"i > mid\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"arr[i] >= arr[mid] >= target\"), \" and since we are only interested in the first occurrence we can store current \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"mid\"), \" as a valid answer for the current \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"[low, high]\"), \" range and continue our search for the first occurrence in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"[low, mid - 1]\"), \" and our invariant will be preserved if there's a first occurrence in the range \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"[low, mid - 1]\"), \".\"), mdx(\"h5\", null, mdx(\"inlineCode\", {\n    parentName: \"h5\"\n  }, \"arr[mid] < target\"), \" branch (else branch):\"), mdx(\"p\", null, \"Since \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"arr[mid] < target\"), \" then for all index \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"i < mid\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"arr[i] <= arr[mid] < target\"), \" and hence it is futile to search in the range \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"[low, mid]\"), \".\"), mdx(\"p\", null, \"So when we set \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"low\"), \" to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"mid + 1\"), \", our invariant still holds true. If \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"target\"), \" is in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"arr\"), \" then its first occurrence will be found in the updated range \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"[mid + 1, high]\"), \".\"), mdx(\"h3\", null, \"Bound function:\"), mdx(\"p\", null, \"Since the loop condition and the updates in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"low\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"high\"), \" variables are similar to the first approach, we won't be proving the loop termination via bound function for this approach.\"), mdx(\"h3\", null, \"Proof of correctness:\"), mdx(\"p\", null, \"If \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"target\"), \" existed in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"arr\"), \" then by our invariant we would have reached a range such that \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"low == high == mid\"), \" for which \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"low <= firstOccurrence(target) <= high\"), \" and since \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"low == high == mid\"), \" we would have stored that \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"mid\"), \" as \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"answer\"), \". So if target existed in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"arr\"), \" then we would have stored its first occurrence in the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"answer\"), \".\"), mdx(\"p\", null, \"Eventually, we will break out of the loop when \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"low > high\"), \" and that will happen only after we have searched for the smallest possible range which is \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"low == high == mid\"), \" and for that valid search space, if \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"arr[mid]\"), \" was equal to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"target\"), \" then we would've returned stored \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"mid\"), \" as the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"answer\"), \". The fact that \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"answer\"), \" is \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"-1\"), \" means that we have exhausted all valid search spaces and target doesn't exist in the array and hence it doesn't have first occurrence.\"), mdx(\"hr\", null), mdx(\"h2\", null, \"3) Find the index of an element's last occurrence in a sorted array (with duplicates):\"), mdx(\"h3\", null, \"Code:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-ts\"\n  }, \"function findLastOccurrence(arr: number[], target: number): number {\\n  let low = 0;\\n  let high = arr.length - 1;\\n  let answer = -1;\\n\\n  while (low <= high) {\\n    const mid = low + Math.floor((high - low) / 2);\\n    if (arr[mid] == target) {\\n      answer = mid;\\n      low = mid + 1;\\n    } else if (arr[mid] > target) {\\n      high = mid - 1;\\n    } else {\\n      low = mid + 1;\\n    }\\n  }\\n\\n  return answer;\\n}\\n\")), mdx(\"h3\", null, \"Invariants:\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Invariant\"), \": If \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"target\"), \" is in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"arr\"), \" then there exists at least one valid range \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"[low, high]\"), \" where \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"low <= lastIndex(target) <= high\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"arr[low] <= target <= arr[high]\"), \".\"), mdx(\"p\", null, \"If \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"target\"), \" is not in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"arr\"), \" then there doesn't exist any such valid range \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"[low, high]\"), \".\"), mdx(\"h4\", null, \"Proving Invariant:\"), mdx(\"p\", null, \"Before entering the loop, if \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"target\"), \" exists in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"arr\"), \" then the range \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"[0, arr.length - 1]\"), \" will definitely contain its first occurrence.\"), mdx(\"h5\", null, mdx(\"inlineCode\", {\n    parentName: \"h5\"\n  }, \"arr[mid] == target\"), \" branch:\"), mdx(\"p\", null, \"Inside the loop, if \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"arr[mid] == target\"), \" then we have found one such occurrence of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"target\"), \" in our \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"arr\"), \". It can be a valid last occurrence but there's a chance that there might be a last occurrence after this.\"), mdx(\"p\", null, \"Mathematically, we know that for all \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"i > mid\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"arr[i] >= arr[mid] >= target\"), \" and since we are interested in the last occurrence we can store current \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"mid\"), \" as a valid answer for the current \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"[low, high]\"), \" range and continue our search for the last occurrence in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"[mid + 1, high]\"), \" and our invariant will be preserved if there's a last occurrence in the range \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"[mid + 1, high]\"), \".\"), mdx(\"h5\", null, mdx(\"inlineCode\", {\n    parentName: \"h5\"\n  }, \"arr[mid] > target\"), \" branch (else if branch):\"), mdx(\"p\", null, \"Since \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"arr[mid] > target\"), \" then for all index \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"i > mid\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"arr[i] >= arr[mid] > target\"), \" and hence it is futile to search in the range \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"[mid, high]\"), \".\"), mdx(\"p\", null, \"So when we set \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"high\"), \" to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"mid - 1\"), \", our invariant still holds true. If \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"target\"), \" is in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"arr\"), \" then its last occurrence will be found in the updated range \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"[low, mid - 1]\"), \".\"), mdx(\"h5\", null, mdx(\"inlineCode\", {\n    parentName: \"h5\"\n  }, \"arr[mid] < target\"), \" branch (else branch):\"), mdx(\"p\", null, \"Since \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"arr[mid] < target\"), \" then for all index \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"i < mid\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"arr[i] <= arr[mid] < target\"), \" and hence it is futile to search in the range \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"[low, mid]\"), \".\"), mdx(\"p\", null, \"So when we set \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"low\"), \" to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"mid + 1\"), \", our invariant still holds true. If \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"target\"), \" is in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"arr\"), \" then its first occurrence will be found in the updated range \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"[mid + 1, high]\"), \".\"), mdx(\"h3\", null, \"Bound function:\"), mdx(\"p\", null, \"Since the loop condition and the updates in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"low\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"high\"), \" variables are similar to the first approach, we won't be proving the loop termination via bound function for this approach.\"), mdx(\"h3\", null, \"Proof of correctness:\"), mdx(\"p\", null, \"If \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"target\"), \" existed in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"arr\"), \" then by our invariant we would have reached a range such that \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"low == high == mid\"), \" for which \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"low <= lastOccurrence(target) <= high\"), \" and since \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"low == high == mid\"), \" we would have stored that \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"mid\"), \" index as \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"answer\"), \". So if target existed in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"arr\"), \" then we would have stored its last occurrence in the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"answer\"), \".\"), mdx(\"p\", null, \"Eventually, we will break out of the loop when \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"low > high\"), \" and that will happen only after we have searched for the smallest possible range which is \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"low = high = mid\"), \" and for that valid search space, if \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"arr[mid]\"), \" was equal to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"target\"), \" then we would've stored \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"mid\"), \" as the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"answer\"), \". The fact that \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"answer\"), \" is -1 means that we have exhausted all valid search spaces and target doesn't exist in the array and hence it doesn't have last occurrence.\"), mdx(\"hr\", null), mdx(\"h2\", null, \"4) Find the first element that is greater than the target in a sorted array:\"), mdx(\"h3\", null, \"Code:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-ts\"\n  }, \"function findUpperbound(arr: number[], target: number): number {\\n  let low = 0;\\n  let high = arr.length - 1;\\n  let answer = -1;\\n\\n  while (low <= high) {\\n    const mid = low + Math.floor((high - low) / 2);\\n    if (arr[mid] > target) {\\n      answer = mid;\\n      high = mid - 1;\\n    } else {\\n      low = mid + 1;\\n    }\\n  }\\n\\n  return answer;\\n}\\n\")), mdx(\"h3\", null, \"Invariants:\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Invariant\"), \": If \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"upperBound(target)\"), \" is in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"arr\"), \" then there exists at least one valid range \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"[low, high]\"), \" where \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"low <= indexOf(upperBound(target)) <= high\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"arr[low] <= upperBound(target) <= arr[high]\"), \".\"), mdx(\"p\", null, \"If \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"upperBound(target)\"), \" is not in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"arr\"), \" then there doesn't exist any such valid range \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"[low, high]\"), \".\"), mdx(\"h4\", null, \"Proving Invariant:\"), mdx(\"p\", null, \"Before entering the loop, if \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"upperBound(target)\"), \" exists in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"arr\"), \" then the range \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"[0, arr.length - 1]\"), \" will definitely contain it.\"), mdx(\"h5\", null, mdx(\"inlineCode\", {\n    parentName: \"h5\"\n  }, \"arr[mid] > target\"), \" branch:\"), mdx(\"p\", null, \"For all \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"i >= mid\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"arr[i] >= arr[mid] > target\"), \" and since we are interested in finding the first element that is just greater than the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"target\"), \", i.e., \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"upperBound(target)\"), \" we can store current \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"mid\"), \" as a valid answer for the current \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"[low, high]\"), \" range and continue our search for the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"upperBound(target)\"), \" in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"[low, mid - 1]\"), \".\"), mdx(\"p\", null, \"So when we set \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"high\"), \" to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"mid - 1\"), \", our invariant still holds true. If \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"upperBound(target)\"), \" is in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"arr\"), \" then it will be found in the updated range \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"[low, mid - 1]\"), \".\"), mdx(\"h5\", null, mdx(\"inlineCode\", {\n    parentName: \"h5\"\n  }, \"arr[mid] <= target\"), \" branch (else branch):\"), mdx(\"p\", null, \"Since \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"arr[mid] <= target\"), \" then for all index \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"i < mid\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"arr[i] <= arr[mid] <= target\"), \" and hence it is futile to search for the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"upperBound(target)\"), \" in the range \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"[low, mid]\"), \".\"), mdx(\"p\", null, \"So when we set \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"low\"), \" to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"mid + 1\"), \", our invariant still holds true. If \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"target\"), \" is in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"arr\"), \" then its first occurrence will be found in the updated range \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"[mid + 1, high]\"), \".\"), mdx(\"h3\", null, \"Bound function:\"), mdx(\"p\", null, \"Since the loop condition and the updates in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"low\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"high\"), \" variables are similar to the first approach, we won't be proving the loop termination via bound function for this approach.\"), mdx(\"h3\", null, \"Proof of correctness:\"), mdx(\"p\", null, \"If \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"upperBound(target)\"), \" existed in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"arr\"), \" then by our invariant we would have reached a range such that \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"low == high == mid\"), \" for which \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"low <= upperBound(target) <= high\"), \". And since \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"low == high == mid\"), \" we would have stored that \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"mid\"), \" index as \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"answer\"), \". So if \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"upperBound(target)\"), \" existed in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"arr\"), \" then we would have stored its index in the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"answer\"), \".\"), mdx(\"p\", null, \"Eventually, we will break out of the loop when \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"low > high\"), \" and that will happen only after we have searched for the smallest possible range which is \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"low == high == mid\"), \" and for that valid search space, if \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"arr[mid]\"), \" was equal to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"upperBound(target)\"), \" then we would've stored \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"mid\"), \" as the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"answer\"), \". The fact that \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"answer\"), \" is \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"-1\"), \" means that we have exhausted all valid search spaces and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"upperBound(target)\"), \" doesn't exist in the array.\"), mdx(\"hr\", null), mdx(\"h2\", null, \"5) Find the first element that is smaller than the \", mdx(\"inlineCode\", {\n    parentName: \"h2\"\n  }, \"target\"), \" in a sorted array:\"), mdx(\"h3\", null, \"Code:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-ts\"\n  }, \"function findLowerBound(arr: number[], target: number): number {\\n  let low = 0;\\n  let high = arr.length - 1;\\n  let answer = -1;\\n\\n  while (low <= high) {\\n    const mid = low + Math.floor((high - low) / 2);\\n    if (arr[mid] < target) {\\n      answer = mid;\\n      low = mid + 1;\\n    } else {\\n      high = mid - 1;\\n    }\\n  }\\n\\n  return answer;\\n}\\n\")), mdx(\"h3\", null, \"Invariants:\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Invariant\"), \": If \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"lowerBound(target)\"), \" is in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"arr\"), \" then there exists at least one valid range \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"[low, high]\"), \" where \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"low <= indexOf(lowerBound(target)) <= high\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"arr[low] <= lowerBound(target) <= arr[high]\"), \".\"), mdx(\"p\", null, \"If \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"lowerBound(target)\"), \" is not in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"arr\"), \" then there doesn't exist any such valid range \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"[low, high]\"), \".\"), mdx(\"h4\", null, \"Proving Invariant:\"), mdx(\"p\", null, \"Before entering the loop, if \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"lowerBound(target)\"), \" exists in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"arr\"), \" then the range \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"[0, arr.length - 1]\"), \" will definitely contain it.\"), mdx(\"h5\", null, mdx(\"inlineCode\", {\n    parentName: \"h5\"\n  }, \"arr[mid] < target\"), \" branch:\"), mdx(\"p\", null, \"For all \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"i <= mid\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"arr[i] <= arr[mid] < target\"), \" and since we are interested in the lower bound (i.e., the first element smaller than the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"target\"), \") we can store current \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"mid\"), \" as a valid answer for the current \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"[low, high]\"), \" range and continue our search for the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"lowerBound(target)\"), \" in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"[mid + 1, high]\"), \".\"), mdx(\"p\", null, \"So when we set \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"low\"), \" to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"mid + 1\"), \", our invariant still holds true. If \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"lowerBound(target)\"), \" is in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"arr\"), \" then it will be found in the updated range \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"[mid + 1, high]\"), \".\"), mdx(\"h5\", null, mdx(\"inlineCode\", {\n    parentName: \"h5\"\n  }, \"arr[mid] >= target\"), \" branch (else branch):\"), mdx(\"p\", null, \"For all \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"i >= mid\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"arr[i] >= arr[mid] >= target\"), \" and since we are interested in the lower bound (i.e., the first element smaller than the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"target\"), \") it is futile to search for it in the range \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"[mid + 1, high]\"), \".\"), mdx(\"p\", null, \"So when we set \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"high\"), \" to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"mid - 1\"), \", our invariant still holds true. If \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"lowerBound(target)\"), \" is in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"arr\"), \" then it will be found in the updated range \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"[low, mid - 1]\"), \".\"), mdx(\"h3\", null, \"Bound function:\"), mdx(\"p\", null, \"Since the loop condition and the updates in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"low\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"high\"), \" variables are similar to the first approach, we won't be proving the loop termination via bound function for this approach.\"), mdx(\"h3\", null, \"Proof of correctness:\"), mdx(\"p\", null, \"If \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"lowerBound(target)\"), \" existed in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"arr\"), \" then by our invariant we would have reached a range such that \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"low == high == mid\"), \" for which \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"low <= lowerBound(target) <= high\"), \". And since \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"low == high == mid\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"arr[mid] == lowerBound(target) < target) we would have stored that \"), \"mid\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"index as\"), \"answer\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \". So if \"), \"lowerBound(target)\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"existed in\"), \"arr\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"then we would have stored its index in the\"), \"answer`.\"), mdx(\"p\", null, \"Eventually, we will break out of the loop when \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"low > high\"), \" and that will happen only after we have searched for the smallest possible range which is \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"low == high == mid\"), \" and for that valid search space, if \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"arr[mid]\"), \" was equal to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"lowerBound(target)\"), \" then we would've stored \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"mid\"), \" as the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"answer\"), \". The fact that \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"answer\"), \" is \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"-1\"), \" means that we have exhausted all valid search spaces and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"lowerBound(target)\"), \" doesn't exist in the array.\"));\n}\n;\nMDXContent.isMDXComponent = true;","excerpt":"1) Find the index of an element in a sorted array without duplicates: Code: Invariants: Invariant : If  target  is in  arr  then there…","timeToRead":7,"banner":null}},"pageContext":{"slug":"/how-to-reason-about-binary-search-properly","formatString":"DD.MM.YYYY"}},
    "staticQueryHashes": ["2744905544","3090400250","318001574"]}